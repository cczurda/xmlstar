

                                           XMLSTARLET USER'S GUIDE

                                  see also http://xmlstar.sourceforge.net/




1. BASIC COMMAND LINE OPTIONS
====================================================

xml
./gen-doc: line 17: ../src/xml: No such file or directory



2. Select/Query XML documents
====================================================

xml sel --help
./gen-doc: line 26: ../src/xml: No such file or directory



3. Editing XML documents
====================================================

xml ed --help
./gen-doc: line 35: ../src/xml: No such file or directory



4. Using XSLT to transform XML documents
====================================================

xml tr --help
./gen-doc: line 44: ../src/xml: No such file or directory



5. Formatting XML documents
====================================================

xml fo --help
./gen-doc: line 53: ../src/xml: No such file or directory



6. Validating XML documents
====================================================

xml val --help
./gen-doc: line 62: ../src/xml: No such file or directory



7. Displaying structure of XML documents
====================================================

xml el --help
./gen-doc: line 71: ../src/xml: No such file or directory



8. Examples:
====================================================

Input1
examples/xml/table.xml

<?xml version="1.0"?>
<xml>
  <table>
    <rec id="1">
      <numField>123</numField>
      <stringField>String Value</stringField>
    </rec>
    <rec id="2">
      <numField>346</numField>
      <stringField>Text Value</stringField>
    </rec>
    <rec id="3">
      <numField>-23</numField>
      <stringField>stringValue</stringField>
    </rec>
  </table>
</xml>


Input2
examples/xml/tab-obj.xml

<?xml version="1.0"?>
<xml>
  <table>
    <rec id="1">
      <numField>123</numField>
      <stringField>String Value</stringField>
      <object name="Obj1">
        <property name="size">10</property>
        <property name="type">Data</property>
      </object>
    </rec>
    <rec id="2">
      <numField>346</numField>
      <stringField>Text Value</stringField>
    </rec>
    <rec id="3">
      <numField>-23</numField>
      <stringField>stringValue</stringField>
    </rec>
  </table>
</xml>


Input3
examples/html/hello1.html

<html>
<head>
  <title>Hello World</title>
  <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
</head>
<body>
  <div align="center">Hello World!<br></div>
</body>
</html>
 


Input4
examples/sgml/docbook1.sgml

<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book>

 <bookinfo>
  <title>DocBook document example</title>
  <author>
   <firstname>Mikhail</firstname>
   <surname>Grushinskiy</surname>
  </author>

  <copyright>
   <year>2002</year>
   <holder>Mikhail Grushinskiy</holder>
  </copyright>
 </bookinfo>

 <preface>
  <title>Sample document</title>

  <para>A simple DocBook example document.</para>
 </preface>

 <chapter>
  <title>XMLStarlet Example</title>

  <para>The <emphasis>XMLStarlet</emphasis> command line toolkit
  allows querying/checking/editing/transforming/formatting XML documents
  from command line</para>

  <para>To find out more on how to use the
  <emphasis>XMLStarlet</emphasis> for XML processing, point
  your browser to <ulink
  url="http://xmlstar.sourceforge.net/">http://xmlstar.sourceforge.net/</ulink>.
  </para>

 </chapter>

</book>



Stylesheet1
examples/xsl/sum1.xsl

<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>
<xsl:param name="inputFile">-</xsl:param>
<xsl:template match="/">
  <xsl:call-template name="t1"/>
</xsl:template>
<xsl:template name="t1">
  <xsl:value-of select="sum(/xml/table/rec/numField)"/>
  <xsl:value-of select="'&#10;'"/>
</xsl:template>
</xsl:stylesheet>


Stylesheet2
examples/xsl/hello1.xsl

<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>
<xsl:param name="inputFile">-</xsl:param>
<xsl:template match="/">
  <xsl:call-template name="t1"/>
</xsl:template>
<xsl:template name="t1">
  <xsl:for-each select="/">
    <xsl:value-of select="/html/body/div"/>
  </xsl:for-each>
</xsl:template>
</xsl:stylesheet>


Stylesheet3
examples/xsl/param1.xsl

<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text"/>
<xsl:param name="Text"/>
<xsl:param name="Count"/>
<xsl:template match="/">
  <xsl:call-template name="t1"/>
</xsl:template>
<xsl:template name="t1">
  <xsl:for-each select="/xml">
    <xsl:value-of select="$Text"/>
    <xsl:value-of select="$Count"/>
    <xsl:value-of select="'&#10;'"/>
  </xsl:for-each>
</xsl:template>
</xsl:stylesheet>



Command:
# XML canonization
./xmlstarlet c14n --with-comments ../examples/xml/structure.xml ; echo $?
Result Output:
<a1>
  <a11>
    <a111>
      <a1111></a1111>
    </a111>
    <a112>
      <a1121></a1121>
    </a112>
  </a11>
  <a12></a12>
  <a13>
    <a131></a131>
  </a13>
</a1>
0


Command:
# Count elements matching XPath expression
./xmlstarlet sel -t -v "count(/xml/table/rec/numField)" xml/table.xml
Result Output:
3


Command:
# Count all nodes in XML document
./xmlstarlet sel -t -f -o " " -v "count(//node())" xml/table.xml xml/tab-obj.xml
Result Output:
xml/table.xml 32
xml/tab-obj.xml 41


Command:
# Delete elements matching XPath expression
./xmlstarlet ed -d /xml/table/rec[@id='2'] xml/table.xml
Result Output:
<?xml version="1.0"?>
<xml>
  <table>
    <rec id="1">
      <numField>123</numField>
      <stringField>String Value</stringField>
    </rec>
    <rec id="3">
      <numField>-23</numField>
      <stringField>stringValue</stringField>
    </rec>
  </table>
</xml>


Command:
# Generate HTML from given SGML docbook document
./xmlstarlet tr --omit-decl --docbook /usr/share/sgml/docbook/yelp/docbook/html/docbook.xsl  sgml/docbook1.sgml | \
    ./xmlstarlet fo --html --indent-spaces 2
Result Output:
<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
  <head>
    <meta content="text/html; charset=ISO-8859-1" http-equiv="Content-Type"/>
    <title>DocBook document example</title>
    <meta name="generator" content="DocBook XSL Stylesheets V1.48"/>
  </head>
  <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
    <div class="book">
      <div class="titlepage">
        <div>
          <h1 class="title"><a name="id2765244"/>DocBook document example</h1>
        </div>
        <div>
          <h3 class="author">Mikhail Grushinskiy</h3>
        </div>
        <div>
          <p class="copyright">Copyright © 2002 Mikhail Grushinskiy</p>
        </div>
        <hr/>
      </div>
      <div class="toc">
        <p>
          <b>Table of Contents</b>
        </p>
        <dl>
          <dt>
            <a href="#id2765482">Sample document</a>
          </dt>
          <dt>1. <a href="#id2767329">XMLStarlet Example</a></dt>
        </dl>
      </div>
      <div class="preface">
        <div class="titlepage">
          <div>
            <h2 class="title"><a name="id2765482"/>Sample document</h2>
          </div>
        </div>
        <p>A simple DocBook example document.</p>
      </div>
      <div class="chapter">
        <div class="titlepage">
          <div>
            <h2 class="title"><a name="id2767329"/>Chapter 1. XMLStarlet Example</h2>
          </div>
        </div>
        <p>The <span class="emphasis"><i>XMLStarlet</i></span> command line toolkit
  allows querying/checking/editing/transforming/formatting XML documents
  from command line</p>
        <p>To find out more on how to use the
  <span class="emphasis"><i>XMLStarlet</i></span> for XML processing, point
  your browser to <a href="http://xmlstar.sourceforge.net/" target="_top">http://xmlstar.sourceforge.net/</a>.
  </p>
      </div>
    </div>
  </body>
</html>


Command:
# Validate XML document against DTD
./xmlstarlet val --dtd dtd/table.dtd xml/tab-obj.xml >/dev/null 2>&1; echo $?
Result Output:
1


Command:
# Validate XML document against DTD
./xmlstarlet val --dtd dtd/table.dtd xml/table.xml >/dev/null 2>&1; echo $?
Result Output:
0


Command:
# Display element structure of XML document
./xmlstarlet el ./xml/tab-obj.xml
Result Output:
xml
xml/table
xml/table/rec
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec/object
xml/table/rec/object/property
xml/table/rec/object/property
xml/table/rec
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec
xml/table/rec/numField
xml/table/rec/stringField


Command:
# Display element structure of XML document (including attributes)
./xmlstarlet el -a ./xml/tab-obj.xml
Result Output:
xml
xml/table
xml/table/rec
xml/table/rec/@id
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec/object
xml/table/rec/object/@name
xml/table/rec/object/property
xml/table/rec/object/property/@name
xml/table/rec/object/property
xml/table/rec/object/property/@name
xml/table/rec
xml/table/rec/@id
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec
xml/table/rec/@id
xml/table/rec/numField
xml/table/rec/stringField


Command:
# Display element structure of XML document (including attribute values)
./xmlstarlet el -v ./xml/tab-obj.xml
Result Output:
xml
xml/table
xml/table/rec[@id='1']
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec/object[@name='Obj1']
xml/table/rec/object/property[@name='size']
xml/table/rec/object/property[@name='type']
xml/table/rec[@id='2']
xml/table/rec/numField
xml/table/rec/stringField
xml/table/rec[@id='3']
xml/table/rec/numField
xml/table/rec/stringField


Command:
# Calculate EXSLT (XSLT extentions) XPath value
echo "<x/>" | ./xmlstarlet sel -t -v "math:abs(-1000)"
Result Output:
1000


Command:
# Find XML files matching XPath expression (containing 'object' element)
./xmlstarlet sel -t -m //object -f xml/table.xml xml/tab-obj.xml
Result Output:
xml/tab-obj.xml


Command:
# Generate XML document using command line xml sel
echo "<x/>" | ./xmlstarlet sel -t -m / -e xml -e child -a data -o value
Result Output:
<xml><child data="value"/></xml>


Command:
# Apply XSLT stylesheet to HTML input file
./xmlstarlet tr --html xsl/hello1.xsl html/hello1.html
Result Output:
Hello World!

Command:
# Use local-name() XSLT function in XPath expression
./xmlstarlet sel -t -v "//*[local-name()='query']" xsql/jobserve.xsql
Result Output:

  SELECT substr(title,1,26) short_title, title, location, skills
  FROM job
  WHERE UPPER(title) LIKE '%ORACLE%'
  ORDER BY first_posted DESC



Command:
# Select text value of an XML element mathing given XPath expression
./xmlstarlet sel -t -m "/xml/table/rec[@id='2']" -v numField xml/table.xml
Result Output:
346


Command:
# Format XML document disabling indent
cat xml/tab-obj.xml | ./xmlstarlet fo --noindent 
Result Output:
<?xml version="1.0"?>
<xml>
<table>
<rec id="1">
<numField>123</numField>
<stringField>String Value</stringField>
<object name="Obj1">
<property name="size">10</property>
<property name="type">Data</property>
</object>
</rec>
<rec id="2">
<numField>346</numField>
<stringField>Text Value</stringField>
</rec>
<rec id="3">
<numField>-23</numField>
<stringField>stringValue</stringField>
</rec>
</table>
</xml>


Command:
# xsl:copy-of in xml sel command
./xmlstarlet sel -B -t -m /xml/table/rec -c . -n xml/table.xml
Result Output:
<rec id="1"><numField>123</numField><stringField>String Value</stringField></rec>
<rec id="2"><numField>346</numField><stringField>Text Value</stringField></rec>
<rec id="3"><numField>-23</numField><stringField>stringValue</stringField></rec>



Command:
# Query XML document and produce sorted text table
./xmlstarlet sel -T -t -m /xml/table/rec -s D:N:- "@id" -v "concat(@id,'|',numField,'|',stringField)" -n xml/table.xml
Result Output:
3|-23|stringValue
2|346|Text Value
1|123|String Value


Command:
# Print structure of XML element using xml sel (advanced XPath expressions and xml sel command usage)
./xmlstarlet sel -T -t -m '//*' \
-m 'ancestor-or-self::*' -v 'name()' -i 'not(position()=last())' -o . -b -b -n \
xml/structure.xml
Result Output:
a1
a1.a11
a1.a11.a111
a1.a11.a111.a1111
a1.a11.a112
a1.a11.a112.a1121
a1.a12
a1.a13
a1.a13.a131


Command:
# Calculating running sum on XML document
./xmlstarlet sel -t -v "sum(/xml/table/rec/numField)" xml/table.xml
Result Output:
446


Command:
# Indent XML document with tabs
cat xml/tab-obj.xml | ./xmlstarlet fo --indent-tab 
Result Output:
<?xml version="1.0"?>
<xml>
	<table>
		<rec id="1">
			<numField>123</numField>
			<stringField>String Value</stringField>
			<object name="Obj1">
				<property name="size">10</property>
				<property name="type">Data</property>
			</object>
		</rec>
		<rec id="2">
			<numField>346</numField>
			<stringField>Text Value</stringField>
		</rec>
		<rec id="3">
			<numField>-23</numField>
			<stringField>stringValue</stringField>
		</rec>
	</table>
</xml>


Command:
# Generate plain text table from XML document
./xmlstarlet sel -T -t -m /xml/table/rec -v "@id" -o "|" -v numField -o "|" -v stringField -n xml/table.xml
Result Output:
1|123|String Value
2|346|Text Value
3|-23|stringValue


Command:
# Generate plain text table from XML document
./xmlstarlet sel -T -t -m /xml/table/rec -v "concat(@id,'|',numField,'|',stringField)" -n xml/table.xml
Result Output:
1|123|String Value
2|346|Text Value
3|-23|stringValue


Command:
# Generate plain text table from XML document
./xmlstarlet sel -T \
    -t -o "===================" -n \
       -m xml/table/rec -v "concat(@id,'|',numField,'|',stringField)" -n \
    -t -o "===================" -n xml/table.xml
Result Output:
===================
1|123|String Value
2|346|Text Value
3|-23|stringValue
===================


Command:
# Validate XML documents using well-formedness/DTD/XSD/RelaxNG checks
echo "==============================================="
echo "Well-Formedness Validation Tests"
echo "- 1 -------------------------------------------"
./xmlstarlet val xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 2 -------------------------------------------"
./xmlstarlet val -g xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 3 -------------------------------------------"
./xmlstarlet val -b xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 4 -------------------------------------------"
./xmlstarlet val -q xml/table.xml xml/tab-obj.xml 2>/dev/null; echo $?

echo "==============================================="
echo "DTD Validation Tests"
echo "- 1 -------------------------------------------"
./xmlstarlet val -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 2 -------------------------------------------"
./xmlstarlet val -g -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 3 -------------------------------------------"
./xmlstarlet val -b -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 4 -------------------------------------------"
./xmlstarlet val -q -d dtd/table.dtd xml/table.xml 2>/dev/null; echo $?

echo "==============================================="
echo "Schema Validation Tests"
echo "- 1 -------------------------------------------"
./xmlstarlet val -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 2 -------------------------------------------"
./xmlstarlet val -g -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 3 -------------------------------------------"
./xmlstarlet val -b -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2>/dev/null; echo $?
echo "- 4 -------------------------------------------"
./xmlstarlet val -q -s xsd/table.xsd xml/table.xml 2>/dev/null; echo $?

echo "==============================================="
echo "RelaxNG Schema Validation Tests"
echo "- 1 -------------------------------------------"
./xmlstarlet val -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2>/dev/null; echo $?
echo "- 2 -------------------------------------------"
./xmlstarlet val -g -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2>/dev/null; echo $?
echo "- 3 -------------------------------------------"
./xmlstarlet val -b -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2>/dev/null; echo $?
echo "- 4 -------------------------------------------"
./xmlstarlet val -q -r relaxng/address.rng relaxng/address.xml 2>/dev/null; echo $?
Result Output:
===============================================
Well-Formedness Validation Tests
- 1 -------------------------------------------
xml/table.xml - valid
xml/tab-obj.xml - valid
xml/tab-bad.xml - invalid
1
- 2 -------------------------------------------
xml/table.xml
xml/tab-obj.xml
1
- 3 -------------------------------------------
xml/tab-bad.xml
1
- 4 -------------------------------------------
0
===============================================
DTD Validation Tests
- 1 -------------------------------------------
xml/table.xml - valid
xml/tab-obj.xml - invalid
xml/tab-bad.xml - invalid
1
- 2 -------------------------------------------
xml/table.xml
1
- 3 -------------------------------------------
xml/tab-obj.xml
xml/tab-bad.xml
1
- 4 -------------------------------------------
0
===============================================
Schema Validation Tests
- 1 -------------------------------------------
xml/table.xml - valid
xml/tab-obj.xml - invalid
xml/tab-bad.xml - invalid
1
- 2 -------------------------------------------
xml/table.xml
1
- 3 -------------------------------------------
xml/tab-obj.xml
xml/tab-bad.xml
1
- 4 -------------------------------------------
0
===============================================
RelaxNG Schema Validation Tests
- 1 -------------------------------------------
relaxng/address.xml - valid
relaxng/address-bad.xml - invalid
1
- 2 -------------------------------------------
relaxng/address.xml
1
- 3 -------------------------------------------
relaxng/address-bad.xml
1
- 4 -------------------------------------------
0


Command:
# Include one XML document into another using XML include
./xmlstarlet tr --xinclude xsl/cat.xsl xml/document.xml
Result Output:
<?xml version="1.0" encoding="utf-8"?>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  <p>120 Mz is adequate for an average home user.</p>
  <disclaimer xml:base="xml/disclaimer.xml">
  <p>The opinions represented herein represent those of the individual
  and should not be interpreted as official policy endorsed by this
  organization.</p>
</disclaimer>
</document>


Command:
# Passing parameters to XSLT stylesheet
./xmlstarlet tr xsl/param1.xsl -p Count='count(/xml/table/rec)' -s Text="Count=" xml/table.xml
Result Output:
Count=3


Command:
# Applying XSLT stylesheet to XML document
./xmlstarlet tr xsl/sum1.xsl xml/table.xml
Result Output:
446



